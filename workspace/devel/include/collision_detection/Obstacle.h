// Generated by gencpp from file collision_detection/Obstacle.msg
// DO NOT EDIT!


#ifndef COLLISION_DETECTION_MESSAGE_OBSTACLE_H
#define COLLISION_DETECTION_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace collision_detection
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : distance(0.0)
    , priority(0.0)  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , priority(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_type;
  _distance_type distance;

   typedef double _priority_type;
  _priority_type priority;





  typedef boost::shared_ptr< ::collision_detection::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collision_detection::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::collision_detection::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::collision_detection::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::collision_detection::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collision_detection::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collision_detection::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::collision_detection::Obstacle_<ContainerAllocator1> & lhs, const ::collision_detection::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.priority == rhs.priority;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::collision_detection::Obstacle_<ContainerAllocator1> & lhs, const ::collision_detection::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace collision_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::collision_detection::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collision_detection::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collision_detection::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collision_detection::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_detection::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_detection::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collision_detection::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebfa18843f7e523990e60f4721176d31";
  }

  static const char* value(const ::collision_detection::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebfa18843f7e5239ULL;
  static const uint64_t static_value2 = 0x90e60f4721176d31ULL;
};

template<class ContainerAllocator>
struct DataType< ::collision_detection::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collision_detection/Obstacle";
  }

  static const char* value(const ::collision_detection::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collision_detection::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 distance\n"
"float64 priority\n"
;
  }

  static const char* value(const ::collision_detection::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collision_detection::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collision_detection::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collision_detection::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "priority: ";
    Printer<double>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLISION_DETECTION_MESSAGE_OBSTACLE_H
