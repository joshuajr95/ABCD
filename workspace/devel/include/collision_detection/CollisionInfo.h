// Generated by gencpp from file collision_detection/CollisionInfo.msg
// DO NOT EDIT!


#ifndef COLLISION_DETECTION_MESSAGE_COLLISIONINFO_H
#define COLLISION_DETECTION_MESSAGE_COLLISIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <collision_detection/Obstacle.h>
#include <collision_detection/Obstacle.h>
#include <collision_detection/Obstacle.h>

namespace collision_detection
{
template <class ContainerAllocator>
struct CollisionInfo_
{
  typedef CollisionInfo_<ContainerAllocator> Type;

  CollisionInfo_()
    : left()
    , center()
    , right()  {
    }
  CollisionInfo_(const ContainerAllocator& _alloc)
    : left(_alloc)
    , center(_alloc)
    , right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::collision_detection::Obstacle_<ContainerAllocator>  _left_type;
  _left_type left;

   typedef  ::collision_detection::Obstacle_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::collision_detection::Obstacle_<ContainerAllocator>  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::collision_detection::CollisionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collision_detection::CollisionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CollisionInfo_

typedef ::collision_detection::CollisionInfo_<std::allocator<void> > CollisionInfo;

typedef boost::shared_ptr< ::collision_detection::CollisionInfo > CollisionInfoPtr;
typedef boost::shared_ptr< ::collision_detection::CollisionInfo const> CollisionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collision_detection::CollisionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collision_detection::CollisionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::collision_detection::CollisionInfo_<ContainerAllocator1> & lhs, const ::collision_detection::CollisionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.center == rhs.center &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::collision_detection::CollisionInfo_<ContainerAllocator1> & lhs, const ::collision_detection::CollisionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace collision_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::collision_detection::CollisionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collision_detection::CollisionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collision_detection::CollisionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collision_detection::CollisionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_detection::CollisionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_detection::CollisionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collision_detection::CollisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a174fa88f0c00f2e81e61d98593bf57f";
  }

  static const char* value(const ::collision_detection::CollisionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa174fa88f0c00f2eULL;
  static const uint64_t static_value2 = 0x81e61d98593bf57fULL;
};

template<class ContainerAllocator>
struct DataType< ::collision_detection::CollisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collision_detection/CollisionInfo";
  }

  static const char* value(const ::collision_detection::CollisionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collision_detection::CollisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Obstacle left\n"
"Obstacle center\n"
"Obstacle right\n"
"================================================================================\n"
"MSG: collision_detection/Obstacle\n"
"float64 distance\n"
"float64 priority\n"
;
  }

  static const char* value(const ::collision_detection::CollisionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collision_detection::CollisionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.center);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collision_detection::CollisionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collision_detection::CollisionInfo_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    s << std::endl;
    Printer< ::collision_detection::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::collision_detection::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "right: ";
    s << std::endl;
    Printer< ::collision_detection::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLISION_DETECTION_MESSAGE_COLLISIONINFO_H
